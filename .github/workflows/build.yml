# This workflow will build a Java project with Ant
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-ant

name: Java CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'
    - name: prepare build
      run: |
        wget -nv -O icy.zip http://icy.bioimageanalysis.org/download-file/\?id\=89162 && unzip icy.zip -d icy  && rm icy.zip
        wget -nv https://github.com/FerreolS/IcyHLPluginInstaller/archive/jar.zip && unzip jar.zip && mv IcyHLPluginInstaller-jar/IcyHLPluginInstaller.jar icy/plugins/.
        cd icy
        java -jar icy.jar -hl -x plugins.ferreol.icyhlplugininstaller.IcyHLPluginInstaller  plugins.adufour.blocks.Blocks plugins.adufour.protocols.Protocols
        cd ..
        mkdir lib
        mkdir bin
        mv icy/icy.jar lib/
        mv icy/lib/icy-bioformats.jar lib/
        mv icy/plugins/adufour/blocks/Blocks.jar lib/
        mv icy/plugins/adufour/ezplug/EzPlug.jar lib/
        mv icy/plugins/adufour/protocols/Protocols.jar lib/
    - name: prepare tipi
      run: |
        git clone --quiet --branch=master https://github.com/emmt/TiPi.git
        cd TiPi && ant build && ant tipi-sdk
        mv TiPi.zip ../ && cd ..
        cp -r TiPi/lib/* lib/
    - name: prepare microtipi
      run: |
        git clone --quiet --branch=master https://github.com/FerreolS/microTiPi.git
        mkdir src-doc src-epidemic
        cp -r microTiPi/src/microTiPi src-doc
        mv microTiPi/src/microTiPi src-epidemic
    - name: Build with Ant
      run: |
        ant simpledemic
        ant epidemic
        ant doc > /dev/null

    - uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./doc
        force_orphan: true

    - name: Push jars
      uses: s0/git-publish-subdir-action@develop
      env:
        REPO: self
        BRANCH: jars # The branch name where you want to push the assets
        FOLDER: jar # The directory where your assets are generated
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub will automatically add this - you don't need to bother getting a token
        MESSAGE: "Build: ({sha}) {msg}" # The commit message
        SQUASH_HISTORY: true
